{"ast":null,"code":"/*! @azure/msal-common v6.0.0 2022-01-04 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\n\nvar AuthenticationHeaderParser =\n/** @class */\nfunction () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n\n\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    } // Attempt to parse nonce from WWW-Authenticate\n\n\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    } // If neither header is present, throw missing headers error\n\n\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n\n\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n          key = _a[0],\n          value = _a[1]; // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n\n\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, \"\"));\n    });\n    return challengeMap;\n  };\n\n  return AuthenticationHeaderParser;\n}();\n\nexport { AuthenticationHeaderParser };","map":{"version":3,"sources":["../../src/request/AuthenticationHeaderParser.ts"],"names":[],"mappings":";;;;;AAAA;;;;;AAgBA;;;;;;;;AAOI,WAAA,0BAAA,CAAY,OAAZ,EAA2C;AACvC,SAAK,OAAL,GAAe,OAAf;AACH;;;;;;;AAMD,EAAA,0BAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;;AAEI,QAAM,kBAAkB,GAAG,KAAK,OAAL,CAAa,WAAW,CAAC,kBAAzB,CAA3B;;AACA,QAAI,kBAAJ,EAAwB;AACpB,UAAM,4BAA4B,GAAG,KAAK,eAAL,CAAmD,kBAAnD,CAArC;;AACA,UAAI,4BAA4B,CAAC,SAAjC,EAA4C;AACxC,eAAO,4BAA4B,CAAC,SAApC;AACH;;AACD,YAAM,wBAAwB,CAAC,sCAAzB,CAAgE,WAAW,CAAC,kBAA5E,EAAgG,iCAAhG,CAAN;AACH,KATL,C;;;AAYI,QAAM,eAAe,GAAG,KAAK,OAAL,CAAa,WAAW,CAAC,eAAzB,CAAxB;;AACA,QAAI,eAAJ,EAAqB;AACjB,UAAM,yBAAyB,GAAG,KAAK,eAAL,CAAgD,eAAhD,CAAlC;;AACA,UAAI,yBAAyB,CAAC,KAA9B,EAAoC;AAChC,eAAO,yBAAyB,CAAC,KAAjC;AACH;;AACD,YAAM,wBAAwB,CAAC,sCAAzB,CAAgE,WAAW,CAAC,eAA5E,EAA6F,6BAA7F,CAAN;AACH,KAnBL,C;;;AAsBI,UAAM,wBAAwB,CAAC,4CAAzB,EAAN;AACH,GAvBD;;;;;;;;AA8BQ,EAAA,0BAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAA2B,MAA3B,EAAyC;AACrC,QAAM,eAAe,GAAG,MAAM,CAAC,OAAP,CAAe,GAAf,CAAxB;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,MAAP,CAAc,eAAe,GAAG,CAAhC,EAAmC,KAAnC,CAAyC,GAAzC,CAAnB;AACA,QAAM,YAAY,GAAG,EAArB;AAEA,IAAA,UAAU,CAAC,OAAX,CAAmB,UAAC,SAAD,EAAkB;AAC3B,UAAA,EAAA,GAAiB,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAjB;AAAA,UAAE,GAAG,GAAA,EAAA,CAAA,CAAA,CAAL;AAAA,UAAO,KAAK,GAAA,EAAA,CAAA,CAAA,CAAZ,CAD2B,C;;;AAGjC,MAAA,YAAY,CAAC,GAAD,CAAZ,GAAoB,QAAQ,CAAC,KAAK,CAAC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAD,CAA5B;AACH,KAJD;AAMA,WAAO,YAAP;AACH,GAZO;;AAaZ,SAAA,0BAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { HeaderNames } from \"../utils/Constants\";\n\ntype WWWAuthenticateChallenges = {\n    nonce?: string,\n};\n\ntype AuthenticationInfoChallenges = {\n    nextnonce?: string\n};\n\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nexport class AuthenticationHeaderParser {\n    private headers: Record<string, string>;\n\n    constructor(headers: Record<string, string>) {\n        this.headers = headers;\n    }\n\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns \n     */\n    getShrNonce(): string {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges = this.parseChallenges<AuthenticationInfoChallenges>(authenticationInfo);\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n        }\n\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges = this.parseChallenges<WWWAuthenticateChallenges>(wwwAuthenticate);     \n            if (wwwAuthenticateChallenges.nonce){\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n        }\n\n        // If neither header is present, throw missing headers error\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n    }\n\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header \n     * @returns \n     */\n    private parseChallenges<T>(header: string): T {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {} as T;\n\n        challenges.forEach((challenge: string) => {\n            const [ key, value ] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, \"\"));\n        });\n\n        return challengeMap;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}