{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __awaiter, __generator, __assign, __spread } from '../_virtual/_tslib.js';\nimport { AccountEntity, AuthenticationScheme, ClientConfigurationError, StringUtils, UrlString, ServerTelemetryManager } from '@azure/msal-common';\nimport { version } from '../packageMetadata.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BaseInteractionClient =\n/** @class */\nfunction () {\n  function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n  }\n\n  BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!account) return [3\n            /*break*/\n            , 5];\n\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n              this.logger.verbose(\"Setting active account to null\");\n              this.browserStorage.setActiveAccount(null);\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account))];\n\n          case 2:\n            _a.sent();\n\n            this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [3\n            /*break*/\n            , 9];\n\n          case 5:\n            _a.trys.push([5, 8,, 9]); // Clear all accounts and tokens\n\n\n            return [4\n            /*yield*/\n            , this.browserStorage.clear()];\n\n          case 6:\n            // Clear all accounts and tokens\n            _a.sent(); // Clear any stray keys from IndexedDB\n\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.clearKeystore()];\n\n          case 7:\n            // Clear any stray keys from IndexedDB\n            _a.sent();\n\n            this.logger.verbose(\"No account provided in logout request, clearing all cache items.\");\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            _a.sent();\n\n            this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer function for all request APIs\r\n   * @param request\r\n   */\n\n\n  BaseInteractionClient.prototype.initializeBaseRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authority, scopes, _a, validatedRequest;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.verbose(\"Initializing BaseAuthRequest\");\n            authority = request.authority || this.config.auth.authority;\n            scopes = __spread(request && request.scopes || []); // Set authenticationScheme to BEARER if not explicitly set in the request\n\n            if (!request.authenticationScheme) {\n              request.authenticationScheme = AuthenticationScheme.BEARER;\n              this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n            } else {\n              if (request.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                  throw ClientConfigurationError.createMissingSshJwkError();\n                }\n\n                if (!request.sshKid) {\n                  throw ClientConfigurationError.createMissingSshKidError();\n                }\n              }\n\n              this.logger.verbose(\"Authentication Scheme set to \\\"\" + request.authenticationScheme + \"\\\" as configured in Auth request\");\n            }\n\n            if (!(request.claims && !StringUtils.isEmpty(request.claims))) return [3\n            /*break*/\n            , 2];\n            _a = request;\n            return [4\n            /*yield*/\n            , this.browserCrypto.hashString(request.claims)];\n\n          case 1:\n            _a.requestedClaimsHash = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            validatedRequest = __assign(__assign({}, request), {\n              correlationId: this.correlationId,\n              authority: authority,\n              scopes: scopes\n            });\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n\n\n  BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  };\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n\n\n  BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    var telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  };\n\n  return BaseInteractionClient;\n}();\n\nexport { BaseInteractionClient };","map":{"version":3,"sources":["../../src/interaction_client/BaseInteractionClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, INetworkModule, Logger, AuthenticationResult, AccountInfo, AccountEntity, BaseAuthRequest, AuthenticationScheme, UrlString, ServerTelemetryManager, ServerTelemetryRequest, ClientConfigurationError, StringUtils } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\n\nexport abstract class BaseInteractionClient {\n\n    protected config: BrowserConfiguration;\n    protected browserStorage: BrowserCacheManager;\n    protected browserCrypto: ICrypto;\n    protected networkClient: INetworkModule;\n    protected logger: Logger;\n    protected eventHandler: EventHandler;\n    protected correlationId: string;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, correlationId?: string) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n        this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    }\n\n    abstract acquireToken(request: RedirectRequest|PopupRequest|SsoSilentRequest): Promise<AuthenticationResult|void>;\n\n    abstract logout(request: EndSessionRequest): Promise<void>;\n\n    protected async clearCacheOnLogout(account?: AccountInfo| null): Promise<void> {\n        if (account) {\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            } catch (error) {\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            }\n        } else {\n            try {\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\");\n            } catch(e) {\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            }\n        }\n    }\n\n    /**\n     * Initializer function for all request APIs\n     * @param request\n     */\n    protected async initializeBaseRequest(request: Partial<BaseAuthRequest>): Promise<BaseAuthRequest> {\n        this.logger.verbose(\"Initializing BaseAuthRequest\");\n        const authority = request.authority || this.config.auth.authority;\n\n        const scopes = [...((request && request.scopes) || [])];\n\n        // Set authenticationScheme to BEARER if not explicitly set in the request\n        if (!request.authenticationScheme) {\n            request.authenticationScheme = AuthenticationScheme.BEARER;\n            this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n        } else {\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                    throw ClientConfigurationError.createMissingSshJwkError();\n                }\n                if(!request.sshKid) {\n                    throw ClientConfigurationError.createMissingSshKidError();\n                }\n            }\n            this.logger.verbose(`Authentication Scheme set to \"${request.authenticationScheme}\" as configured in Auth request`);\n        }\n\n        // Set requested claims hash if claims were requested\n        if (request.claims && !StringUtils.isEmpty(request.claims)) {\n            request.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\n        } \n\n        const validatedRequest: BaseAuthRequest = {\n            ...request,\n            correlationId: this.correlationId,\n            authority,\n            scopes\n        };\n\n        return validatedRequest;\n    }\n\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    protected getRedirectUri(requestRedirectUri?: string): string {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n    }\n\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    protected initializeServerTelemetryManager(apiId: number, forceRefresh?: boolean): ServerTelemetryManager {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n        };\n\n        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}