{"ast":null,"code":"import React__default, { createContext, useEffect, useMemo, useState, useRef, useContext, useCallback } from 'react';\nimport { stubbedPublicClientApplication, InteractionStatus, Logger, WrapperSKU, EventType, EventMessageUtils, AccountEntity, InteractionType } from '@azure/msal-browser';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */\n\nconst defaultMsalContext = {\n  instance: stubbedPublicClientApplication,\n  inProgress: InteractionStatus.None,\n  accounts: [],\n  logger: /*#__PURE__*/new Logger({})\n};\nconst MsalContext = /*#__PURE__*/createContext(defaultMsalContext);\nconst MsalConsumer = MsalContext.Consumer;\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction getChildrenOrFunction(children, args) {\n  if (typeof children === \"function\") {\n    return children(args);\n  }\n\n  return children;\n}\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA\r\n * @param arrayB\r\n */\n\n\nfunction accountArraysAreEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  const comparisonArray = [...arrayB];\n  return arrayA.every(elementA => {\n    const elementB = comparisonArray.shift();\n\n    if (!elementA || !elementB) {\n      return false;\n    }\n\n    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n  });\n}\n/* eslint-disable header/header */\n\n\nconst name = \"@azure/msal-react\";\nconst version = \"1.2.0\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction MsalProvider({\n  instance,\n  children\n}) {\n  useEffect(() => {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]); // Create a logger instance for msal-react with the same options as PublicClientApplication\n\n  const logger = useMemo(() => {\n    return instance.getLogger().clone(name, version);\n  }, [instance]); // State hook to store accounts\n\n  const [accounts, setAccounts] = useState([]); // State hook to store in progress value\n\n  const [inProgress, setInProgress] = useState(InteractionStatus.Startup); // Mutable object used in the event callback\n\n  const inProgressRef = useRef(inProgress);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      switch (message.eventType) {\n        case EventType.ACCOUNT_ADDED:\n        case EventType.ACCOUNT_REMOVED:\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n        case EventType.HANDLE_REDIRECT_END:\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n        case EventType.LOGOUT_END:\n        case EventType.ACQUIRE_TOKEN_SUCCESS:\n        case EventType.ACQUIRE_TOKEN_FAILURE:\n          const currentAccounts = instance.getAllAccounts();\n\n          if (!accountArraysAreEqual(currentAccounts, accounts)) {\n            logger.info(\"MsalProvider - updating account state\");\n            setAccounts(currentAccounts);\n          } else {\n            logger.info(\"MsalProvider - no account changes\");\n          }\n\n          break;\n      }\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    return () => {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, accounts, logger]);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, inProgressRef.current);\n\n      if (status !== null) {\n        logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${inProgressRef.current} to ${status}`);\n        inProgressRef.current = status;\n        setInProgress(status);\n      }\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    instance.handleRedirectPromise().catch(() => {\n      // Errors should be handled by listening to the LOGIN_FAILURE event\n      return;\n    }).finally(() => {\n      /*\r\n       * If handleRedirectPromise returns a cached promise the necessary events may not be fired\r\n       * This is a fallback to prevent inProgress from getting stuck in 'startup'\r\n       */\n      if (inProgressRef.current === InteractionStatus.Startup) {\n        inProgressRef.current = InteractionStatus.None;\n        setInProgress(InteractionStatus.None);\n      }\n    });\n    return () => {\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  const contextValue = {\n    instance,\n    inProgress,\n    accounts,\n    logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Returns Msal Context values\r\n */\n\n\nconst useMsal = () => useContext(MsalContext);\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction getAccount(instance, accountIdentifiers) {\n  const allAccounts = instance.getAllAccounts();\n\n  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n    const matchedAccounts = allAccounts.filter(accountObj => {\n      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n        return false;\n      }\n\n      return true;\n    });\n    return matchedAccounts[0] || null;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useAccount(accountIdentifiers) {\n  const {\n    instance,\n    inProgress\n  } = useMsal();\n  const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n  const [account, setAccount] = useState(initialStateValue);\n  useEffect(() => {\n    const currentAccount = getAccount(instance, accountIdentifiers);\n\n    if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n      setAccount(currentAccount);\n    }\n  }, [inProgress, accountIdentifiers, instance, account]);\n  return account;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction isAuthenticated(allAccounts, account, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!account;\n  }\n\n  return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\n\n\nfunction useIsAuthenticated(matchAccount) {\n  const {\n    accounts: allAccounts,\n    inProgress\n  } = useMsal();\n  const account = useAccount(matchAccount || {});\n  const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n  const [hasAuthenticated, setHasAuthenticated] = useState(initialStateValue);\n  useEffect(() => {\n    setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n  }, [allAccounts, account, matchAccount]);\n  return hasAuthenticated;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is authenticated\r\n * @param props\r\n */\n\n\nfunction AuthenticatedTemplate({\n  username,\n  homeAccountId,\n  localAccountId,\n  children\n}) {\n  const context = useMsal();\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is unauthenticated\r\n * @param props\r\n */\n\n\nfunction UnauthenticatedTemplate({\n  username,\n  homeAccountId,\n  localAccountId,\n  children\n}) {\n  const context = useMsal();\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\r\n * Optionally provide a request object to be used in the login call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType\r\n * @param authenticationRequest\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n  const {\n    instance,\n    inProgress,\n    logger\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n  const [[result, error], setResponse] = useState([null, null]);\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\n  const login = useCallback(async (callbackInteractionType, callbackRequest) => {\n    const loginType = callbackInteractionType || interactionType;\n    const loginRequest = callbackRequest || authenticationRequest;\n\n    switch (loginType) {\n      case InteractionType.Popup:\n        logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n        return instance.loginPopup(loginRequest);\n\n      case InteractionType.Redirect:\n        // This promise is not expected to resolve due to full frame redirect\n        logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n        return instance.loginRedirect(loginRequest).then(null);\n\n      case InteractionType.Silent:\n        logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n        return instance.ssoSilent(loginRequest);\n\n      default:\n        throw \"Invalid interaction type provided.\";\n    }\n  }, [instance, interactionType, authenticationRequest, logger]);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n          if (message.payload) {\n            setResponse([message.payload, null]);\n          }\n\n          break;\n\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n          if (message.error) {\n            setResponse([null, message.error]);\n          }\n\n          break;\n      }\n    });\n    logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n    return () => {\n      if (callbackId) {\n        logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  useEffect(() => {\n    if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n      logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\"); // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n\n      setHasBeenCalled(true);\n      login().catch(() => {\n        // Errors are handled by the event handler above\n        return;\n      });\n    }\n  }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n  return {\n    login,\n    result,\n    error\n  };\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */\n\n\nfunction MsalAuthenticationTemplate({\n  interactionType,\n  username,\n  homeAccountId,\n  localAccountId,\n  authenticationRequest,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  children\n}) {\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const context = useMsal();\n  const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n    if (!!ErrorComponent) {\n      return React__default.createElement(ErrorComponent, Object.assign({}, msalAuthResult));\n    }\n\n    throw msalAuthResult.error;\n  }\n\n  if (isAuthenticated) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, msalAuthResult));\n  }\n\n  if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n    return React__default.createElement(LoadingComponent, Object.assign({}, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\r\n * @param Component\r\n */\n\n\nconst withMsal = Component => {\n  const ComponentWithMsal = props => {\n    const msal = useMsal();\n    return React__default.createElement(Component, Object.assign({}, props, {\n      msalContext: msal\n    }));\n  };\n\n  const componentName = Component.displayName || Component.name || \"Component\";\n  ComponentWithMsal.displayName = `withMsal(${componentName})`;\n  return ComponentWithMsal;\n};\n\nexport { AuthenticatedTemplate, MsalAuthenticationTemplate, MsalConsumer, MsalContext, MsalProvider, UnauthenticatedTemplate, useAccount, useIsAuthenticated, useMsal, useMsalAuthentication, version, withMsal };","map":{"version":3,"sources":["../src/MsalContext.ts","../src/utils/utilities.ts","../src/packageMetadata.ts","../src/MsalProvider.tsx","../src/hooks/useMsal.ts","../src/hooks/useAccount.ts","../src/hooks/useIsAuthenticated.ts","../src/components/AuthenticatedTemplate.tsx","../src/components/UnauthenticatedTemplate.tsx","../src/hooks/useMsalAuthentication.ts","../src/components/MsalAuthenticationTemplate.tsx","../src/components/withMsal.tsx"],"names":["defaultMsalContext","instance","inProgress","InteractionStatus","accounts","logger","MsalContext","React","MsalConsumer","Consumer","getChildrenOrFunction","children","args","accountArraysAreEqual","arrayA","arrayB","comparisonArray","elementA","elementB","name","version","MsalProvider","useEffect","WrapperSKU","useMemo","useState","inProgressRef","useRef","callbackId","message","EventType","currentAccounts","setAccounts","status","EventMessageUtils","eventType","current","setInProgress","contextValue","value","useMsal","useContext","allAccounts","accountIdentifiers","matchedAccounts","accountObj","useAccount","initialStateValue","getAccount","currentAccount","AccountEntity","setAccount","matchAccount","useIsAuthenticated","account","isAuthenticated","setHasAuthenticated","AuthenticatedTemplate","context","accountIdentifier","localAccountId","UnauthenticatedTemplate","useMsalAuthentication","interactionType","authenticationRequest","login","useCallback","loginType","callbackInteractionType","loginRequest","callbackRequest","InteractionType","setResponse","setHasBeenCalled","error","MsalAuthenticationTemplate","loadingComponent","errorComponent","msalAuthResult","withMsal","Component","ComponentWithMsal","props","msal","msalContext","componentName"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport { IPublicClientApplication, stubbedPublicClientApplication, Logger, InteractionStatus, AccountInfo } from \"@azure/msal-browser\";\n\nexport interface IMsalContext {\n    instance: IPublicClientApplication;\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n    logger: Logger;\n}\n\n/*\n * Stubbed context implementation\n * Only used when there is no provider, which is an unsupported scenario\n */\nconst defaultMsalContext: IMsalContext = {\n    instance: stubbedPublicClientApplication,\n    inProgress: InteractionStatus.None,\n    accounts: [],\n    logger: new Logger({})\n};\n\nexport const MsalContext = React.createContext<IMsalContext>(\n    defaultMsalContext\n);\nexport const MsalConsumer = MsalContext.Consumer;\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\ntype FaaCFunction = <T>(args: T) => React.ReactNode;\n\nexport function getChildrenOrFunction<T>(\n    children: React.ReactNode | FaaCFunction,\n    args: T\n): React.ReactNode {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n\n/*\n * Utility types\n * Reference: https://github.com/piotrwitek/utility-types\n */\ntype SetDifference<A, B> = A extends B ? never : A;\ntype SetComplement<A, A1 extends A> = SetDifference<A, A1>;\nexport type Subtract<T extends T1, T1 extends object> = Pick<T,SetComplement<keyof T, keyof T1>>;\n\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA \n * @param arrayB \n */\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n\n    const comparisonArray = [...arrayB];\n\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n\n        return (elementA.homeAccountId === elementB.homeAccountId) && \n               (elementA.localAccountId === elementB.localAccountId) &&\n               (elementA.username === elementB.username);\n    });\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"1.2.0\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useState, useEffect, useRef, PropsWithChildren, useMemo } from \"react\";\nimport {\n    IPublicClientApplication,\n    EventType,\n    EventMessage,\n    EventMessageUtils,\n    InteractionStatus,\n    Logger,\n    WrapperSKU,\n    AccountInfo\n} from \"@azure/msal-browser\";\nimport { MsalContext, IMsalContext } from \"./MsalContext\";\nimport { accountArraysAreEqual } from \"./utils/utilities\";\nimport { name as SKU, version } from \"./packageMetadata\";\n\nexport type MsalProviderProps = PropsWithChildren<{\n    instance: IPublicClientApplication;\n}>;\n\nexport function MsalProvider({instance, children}: MsalProviderProps): React.ReactElement {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger: Logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n\n    // State hook to store accounts\n    const [accounts, setAccounts] = useState<AccountInfo[]>([]);\n    // State hook to store in progress value\n    const [inProgress, setInProgress] = useState<InteractionStatus>(InteractionStatus.Startup);\n    // Mutable object used in the event callback\n    const inProgressRef = useRef(inProgress);\n    \n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch (message.eventType) {\n                case EventType.ACCOUNT_ADDED:\n                case EventType.ACCOUNT_REMOVED:\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                case EventType.HANDLE_REDIRECT_END:\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                case EventType.LOGOUT_END:\n                case EventType.ACQUIRE_TOKEN_SUCCESS:\n                case EventType.ACQUIRE_TOKEN_FAILURE:\n                    const currentAccounts = instance.getAllAccounts();\n                    if (!accountArraysAreEqual(currentAccounts, accounts)) {\n                        logger.info(\"MsalProvider - updating account state\");\n                        setAccounts(currentAccounts);\n                    } else {\n                        logger.info(\"MsalProvider - no account changes\");\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, accounts, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, inProgressRef.current);\n            if (status !== null) {\n                logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${inProgressRef.current} to ${status}`);\n                inProgressRef.current = status;\n                setInProgress(status);\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        instance.handleRedirectPromise().catch(() => {\n            // Errors should be handled by listening to the LOGIN_FAILURE event\n            return;\n        }).finally(() => {\n            /*\n             * If handleRedirectPromise returns a cached promise the necessary events may not be fired\n             * This is a fallback to prevent inProgress from getting stuck in 'startup'\n             */\n            if (inProgressRef.current === InteractionStatus.Startup) {\n                inProgressRef.current = InteractionStatus.None;\n                setInProgress(InteractionStatus.None);\n            }\n        });\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    const contextValue: IMsalContext = {\n        instance,\n        inProgress,\n        accounts,\n        logger\n    };\n\n    return (\n        <MsalContext.Provider value={contextValue}>\n            {children}\n        </MsalContext.Provider>\n    );\n}\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useContext } from \"react\";\nimport { IMsalContext, MsalContext } from \"../MsalContext\";\n\n/**\n * Returns Msal Context values\n */\nexport const useMsal = (): IMsalContext => useContext(MsalContext);\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { AccountInfo, IPublicClientApplication, InteractionStatus, AccountEntity } from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\nfunction getAccount(instance: IPublicClientApplication, accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const allAccounts = instance.getAllAccounts();\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter(accountObj => {\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n\n            return true;\n        });\n\n        return matchedAccounts[0] || null;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers \n */\nexport function useAccount(accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const { instance, inProgress } = useMsal();\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n    const [account, setAccount] = useState<AccountInfo|null>(initialStateValue);\n\n    useEffect(() => {\n        const currentAccount = getAccount(instance, accountIdentifiers);\n        if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n            setAccount(currentAccount);\n        }\n    }, [inProgress, accountIdentifiers, instance, account]);\n\n    return account;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useAccount } from \"./useAccount\";\nimport { AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\n\nfunction isAuthenticated(allAccounts: AccountIdentifiers[], account: AccountInfo | null, matchAccount?: AccountIdentifiers): boolean {\n    if(matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n        return !!account;\n    }   \n\n    return allAccounts.length > 0;\n}\n\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount \n */\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\n    const { accounts: allAccounts, inProgress } = useMsal();\n    const account = useAccount(matchAccount || {});\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n    const [hasAuthenticated, setHasAuthenticated] = useState<boolean>(initialStateValue);\n\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n    }, [allAccounts, account, matchAccount]);\n\n    return hasAuthenticated;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is authenticated\n * @param props \n */\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }: AuthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type UnauthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is unauthenticated\n * @param props \n */\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }: UnauthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { PopupRequest, RedirectRequest, SsoSilentRequest, InteractionType, AuthenticationResult, AuthError, EventMessage, EventType, InteractionStatus } from \"@azure/msal-browser\";\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useMsal } from \"./useMsal\";\n\nexport type MsalAuthenticationResult = {\n    login: Function; \n    result: AuthenticationResult|null;\n    error: AuthError|null;\n};\n\n/**\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\n * Optionally provide a request object to be used in the login call.\n * Optionally provide a specific user that should be logged in.\n * @param interactionType \n * @param authenticationRequest \n * @param accountIdentifiers \n */\nexport function useMsalAuthentication(\n    interactionType: InteractionType, \n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest, \n    accountIdentifiers?: AccountIdentifiers\n): MsalAuthenticationResult {\n    const { instance, inProgress, logger } = useMsal();\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n    const [[result, error], setResponse] = useState<[AuthenticationResult|null, AuthError|null]>([null, null]);\n    const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\n\n    const login = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: PopupRequest|RedirectRequest|SsoSilentRequest): Promise<AuthenticationResult|null> => {\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch (loginType) {\n            case InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest as PopupRequest);\n            case InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance.loginRedirect(loginRequest as RedirectRequest).then(null);\n            case InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest as SsoSilentRequest);\n            default:\n                throw \"Invalid interaction type provided.\";\n        }\n    }, [instance, interactionType, authenticationRequest, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch(message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([message.payload as AuthenticationResult, null]);\n                    }\n                    break;\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([null, message.error as AuthError]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    useEffect(() => {\n        if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n            logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n            // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n            setHasBeenCalled(true);\n            login().catch(() => {\n                // Errors are handled by the event handler above\n                return;\n            });\n        }\n    }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n\n    return { login, result, error };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { MsalAuthenticationResult, useMsalAuthentication } from \"../hooks/useMsalAuthentication\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionType, PopupRequest, RedirectRequest, SsoSilentRequest, InteractionStatus } from \"@azure/msal-browser\";\nimport { IMsalContext } from \"../MsalContext\";\n\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\n    interactionType: InteractionType;\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest;\n    loadingComponent?: React.ElementType<IMsalContext>;\n    errorComponent?: React.ElementType<MsalAuthenticationResult>;\n}>;\n\n/**\n * Attempts to authenticate user if not already authenticated, then renders child components\n * @param props\n */\nexport function MsalAuthenticationTemplate({ \n    interactionType, \n    username, \n    homeAccountId, \n    localAccountId,\n    authenticationRequest, \n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    children \n}: MsalAuthenticationProps): React.ReactElement|null {\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const context = useMsal();\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return <ErrorComponent {...msalAuthResult} />;\n        }\n\n        throw msalAuthResult.error;\n    }\n    \n    if (isAuthenticated) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, msalAuthResult)}\n            </React.Fragment>\n        );\n    } \n    \n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n        return <LoadingComponent {...context} />;\n    }\n\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport { IMsalContext } from \"../MsalContext\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { Subtract } from \"../utils/utilities\";\n\nexport type WithMsalProps = {\n    msalContext: IMsalContext;\n};\n\n/**\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props \n * @param Component \n */\nexport const withMsal = <P extends WithMsalProps>(Component: React.ComponentType<P>): React.FunctionComponent<Subtract<P,WithMsalProps>> => {\n    const ComponentWithMsal: React.FunctionComponent<Subtract<P,WithMsalProps>> = props => {\n        const msal = useMsal();\n        return <Component {...(props as P)} msalContext={msal} />;\n    };\n\n    const componentName =\n        Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n\n    return ComponentWithMsal;\n};\n"]},"metadata":{},"sourceType":"module"}