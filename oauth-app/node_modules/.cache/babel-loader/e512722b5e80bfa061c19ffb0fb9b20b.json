{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupUtils =\n/** @class */\nfunction () {\n  function PopupUtils(storageImpl, logger) {\n    this.browserStorage = storageImpl;\n    this.logger = logger; // Properly sets this reference for the unload event.\n\n    this.unloadWindow = this.unloadWindow.bind(this);\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupUtils.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n\n\n  PopupUtils.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes, logger) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n\n\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n\n    if (!width || width < 0 || width > winWidth) {\n      logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n\n    if (!height || height < 0 || height > winHeight) {\n      logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n\n    if (!top || top < 0 || top > winHeight) {\n      logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n\n    if (!left || left < 0 || left > winWidth) {\n      logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupUtils.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupUtils.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   */\n\n\n  PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var intervalId = setInterval(function () {\n        if (popupWindow.closed) {\n          // Window is closed\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        clearInterval(intervalId);\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generatePopupName = function (clientId, request) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + request.scopes.join(\"-\") + \".\" + request.authority + \".\" + request.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generateLogoutPopupName = function (clientId, request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\n  };\n\n  return PopupUtils;\n}();\n\nexport { PopupUtils };","map":{"version":3,"sources":["../../src/utils/PopupUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CommonEndSessionRequest, Constants, Logger, StringUtils } from \"@azure/msal-common\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { PopupParams } from \"../interaction_handler/PopupHandler\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConstants, InteractionType } from \"./BrowserConstants\";\n\n/**\n * Popup configurations for setting dimensions and position of popup window\n */\nexport type PopupWindowAttributes = {\n    popupSize?: PopupSize,\n    popupPosition?: PopupPosition\n};\n\nexport type PopupSize = {\n    height: number;\n    width: number;\n};\n\nexport type PopupPosition = {\n    top: number;\n    left: number;\n};\n\nexport class PopupUtils {\n    private browserStorage: BrowserCacheManager;\n    private logger: Logger;\n    private currentWindow: Window|undefined;\n\n    constructor(storageImpl: BrowserCacheManager, logger: Logger) {\n        this.browserStorage = storageImpl;\n        this.logger = logger;\n\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes, this.logger);\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw BrowserAuthError.createEmptyWindowCreatedError();\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + e.message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw BrowserAuthError.createPopupWindowError(e.toString());\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate \n     * @param popupName \n     * @param popupWindowAttributes \n     * @returns \n     */\n    static openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes, logger: Logger): Window|null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\n        }\n\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     */\n    monitorPopupForSameOrigin(popupWindow: Window): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const intervalId = setInterval(() => {\n                if (popupWindow.closed) {\n                    // Window is closed\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createUserCancelledError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                clearInterval(intervalId);\n                resolve();\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    static generatePopupName(clientId: string, request: AuthorizationUrlRequest): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${request.scopes.join(\"-\")}.${request.authority}.${request.correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId \n     * @param request \n     */\n    static generateLogoutPopupName(clientId: string, request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${homeAccountId}.${request.correlationId}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}