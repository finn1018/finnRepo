{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { AsyncMemoryStorage } from '../cache/AsyncMemoryStorage.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps =\n/** @class */\nfunction () {\n  function CryptoOps(logger) {\n    this.logger = logger; // Browser crypto needs to be validated first before any other classes can be set.\n\n    this.browserCrypto = new BrowserCrypto(this.logger);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = {\n      asymmetricKeys: new AsyncMemoryStorage(this.logger),\n      symmetricKeys: new AsyncMemoryStorage(this.logger)\n    };\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.hashString(publicJwkString)];\n\n          case 3:\n            publicJwkHash = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _a.sent(); // Store Keypair data in keystore\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n\n          case 6:\n            // Store Keypair data in keystore\n            _a.sent();\n\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.removeItem(kid)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.containsKey(kid)];\n\n          case 2:\n            keyFound = _a.sent();\n            return [2\n            /*return*/\n            , !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n\n\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataStoreNames, databaseStorage, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            dataStoreNames = Object.keys(this.cache);\n            databaseStorage = this.cache[dataStoreNames[0]];\n            if (!databaseStorage) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , databaseStorage.deleteDatabase()];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = false;\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , _a];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.getItem(kid)];\n\n          case 1:\n            cachedKeyPair = _a.sent();\n\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n            header = {\n              alg: publicKeyJwk.alg,\n              type: KEY_FORMAT_JWK\n            };\n            encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header)); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _a.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            return [2\n            /*return*/\n            , tokenString + \".\" + encodedSignature];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n\n\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(plainText)];\n\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2\n            /*return*/\n            , this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"sources":["../../src/crypto/CryptoOps.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { Base64Decode } from \"../encode/Base64Decode\";\nimport { PkceGenerator } from \"./PkceGenerator\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { AsyncMemoryStorage } from \"../cache/AsyncMemoryStorage\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey,\n    privateKey: CryptoKey,\n    requestMethod?: string,\n    requestUri?: string\n};\n\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nexport type CryptoKeyStore = {\n    asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\n    symmetricKeys: AsyncMemoryStorage<CryptoKey>;\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    private b64Encode: Base64Encode;\n    private b64Decode: Base64Decode;\n    private pkceGenerator: PkceGenerator;\n    private logger: Logger;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: CryptoKeyStore;\n\n    constructor(logger: Logger) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.browserCrypto = new BrowserCrypto(this.logger);\n        this.b64Encode = new Base64Encode();\n        this.b64Decode = new Base64Decode();\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n        this.cache = {\n            asymmetricKeys: new AsyncMemoryStorage<CachedKeyPair>(this.logger),\n            symmetricKeys: new AsyncMemoryStorage<CryptoKey>(this.logger)\n        };\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input \n     */\n    base64Encode(input: string): string {\n        return this.b64Encode.encode(input);\n    }    \n    \n    /**\n     * Decodes input string from base64.\n     * @param input \n     */\n    base64Decode(input: string): string {\n        return this.b64Decode.decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generateCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\n        \n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n\n        const publicJwkString: string = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.asymmetricKeys.setItem(\n            publicJwkHash, \n            {\n                privateKey: unextractablePrivateKey,\n                publicKey: keyPair.publicKey,\n                requestMethod: request.resourceRequestMethod,\n                requestUri: request.resourceRequestUri\n            }\n        );\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.asymmetricKeys.removeItem(kid);\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        const dataStoreNames = Object.keys(this.cache);\n        const databaseStorage = this.cache[dataStoreNames[0]];\n        return databaseStorage ? await databaseStorage.deleteDatabase() : false;\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload \n     * @param kid \n     */\n    async signJwt(payload: SignedHttpRequest, kid: string): Promise<string> {\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n        \n        if (!cachedKeyPair) {\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n        const publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n\n        // Generate header\n        const header = {\n            alg: publicKeyJwk.alg,\n            type: KEY_FORMAT_JWK\n        };\n        const encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedHeader}.${encodedPayload}`;\n\n        // Sign token\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        return `${tokenString}.${encodedSignature}`;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\n        const hashBytes = new Uint8Array(hashBuffer);\n        return this.b64Encode.urlEncodeArr(hashBytes);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}