{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\n\nvar DatabaseStorage =\n/** @class */\nfunction () {\n  function DatabaseStorage() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n\n\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function () {\n            return reject(BrowserAuthError.createDatabaseUnavailableError());\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Opens database if it's not already open\r\n   */\n\n\n  DatabaseStorage.prototype.validateDbIsOpen = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n\n\n  DatabaseStorage.prototype.setItem = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function () {\n                return resolve();\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbDelete = objectStore.delete(key);\n              dbDelete.addEventListener(\"success\", function () {\n                return resolve();\n              });\n              dbDelete.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n\n\n  DatabaseStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGetKeys = objectStore.getAllKeys();\n              dbGetKeys.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbGetKeys.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n\n\n  DatabaseStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbContainsKey = objectStore.count(key);\n              dbContainsKey.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result === 1);\n              });\n              dbContainsKey.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n\n\n  DatabaseStorage.prototype.deleteDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n          deleteDbRequest.addEventListener(\"success\", function () {\n            return resolve(true);\n          });\n          deleteDbRequest.addEventListener(\"error\", function () {\n            return reject(false);\n          });\n        })];\n      });\n    });\n  };\n\n  return DatabaseStorage;\n}();\n\nexport { DatabaseStorage };","map":{"version":3,"sources":["../../src/cache/DatabaseStorage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\n\ninterface IDBOpenDBRequestEvent extends Event {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBRequestEvent extends Event {\n    target: IDBRequest & EventTarget;\n}\n\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\n    private db: IDBDatabase|undefined;\n    private dbName: string;\n    private tableName: string;\n    private version: number;\n    private dbOpen: boolean;\n\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\n                const event = e as IDBOpenOnUpgradeNeededEvent;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBOpenDBRequestEvent;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\",  () => reject(BrowserAuthError.createDatabaseUnavailableError()));\n        });\n    }\n\n    /**\n     * Opens database if it's not already open\n     */\n    private async validateDbIsOpen(): Promise<void> {\n        if (!this.dbOpen) {\n            return await this.open();\n        }\n    }\n\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key \n     */\n    async getItem(key: string): Promise<T | null> {\n        await this.validateDbIsOpen();\n\n        return new Promise<T>((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            dbGet.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result);\n            });\n            dbGet.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key \n     * @param payload \n     */\n    async setItem(key: string, payload: T): Promise<void> {\n        await this.validateDbIsOpen();\n\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n\n            const objectStore = transaction.objectStore(this.tableName);\n\n            const dbPut = objectStore.put(payload, key);\n\n            dbPut.addEventListener(\"success\", () => resolve());\n            dbPut.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        await this.validateDbIsOpen();\n\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n            dbDelete.addEventListener(\"success\", () => resolve());\n            dbDelete.addEventListener(\"error\", (e) => reject(e));\n        });\n    }\n\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys(): Promise<string[]> {\n        await this.validateDbIsOpen();\n\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result);\n            });\n            dbGetKeys.addEventListener(\"error\",  (e: Event) => reject(e));\n        });\n    }\n\n    /**\n     * \n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key: string): Promise<boolean> {\n        await this.validateDbIsOpen();\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                resolve(event.target.result === 1);\n            });\n            dbContainsKey.addEventListener(\"error\", (e: Event) => reject(e));\n        });\n    }\n\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase(): Promise<boolean> {\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}