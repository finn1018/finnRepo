{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { Constants, UrlString, AuthorizationCodeClient, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\n\nvar StandardInteractionClient =\n/** @class */\nfunction (_super) {\n  __extends(StandardInteractionClient, _super);\n\n  function StandardInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, correlationId) || this;\n\n    _this.navigationClient = navigationClient;\n    return _this;\n  }\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var generatedPkceParams, authCodeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generatePkceCodes()];\n\n          case 1:\n            generatedPkceParams = _a.sent();\n            authCodeRequest = __assign(__assign({}, request), {\n              redirectUri: request.redirectUri,\n              code: \"\",\n              codeVerifier: generatedPkceParams.verifier\n            });\n            request.codeChallenge = generatedPkceParams.challenge;\n            request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n            return [2\n            /*return*/\n            , authCodeRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId); // Check if interaction is in progress. Throw error if true.\n\n    if (this.browserStorage.isInteractionInProgress()) {\n      throw BrowserAuthError.createInteractionInProgressError();\n    }\n\n    var validLogoutRequest = __assign({\n      correlationId: this.browserCrypto.createNewGuid()\n    }, logoutRequest);\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n\n\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n\n    return validLogoutRequest;\n  };\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new AuthorizationCodeClient(clientConfig)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"getClientConfiguration called\");\n            return [4\n            /*yield*/\n            , this.getDiscoveredAuthority(requestAuthority)];\n\n          case 1:\n            discoveredAuthority = _a.sent();\n            return [2\n            /*return*/\n            , {\n              authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n              },\n              systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n              },\n              loggerOptions: {\n                loggerCallback: this.config.system.loggerOptions.loggerCallback,\n                piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,\n                logLevel: this.config.system.loggerOptions.logLevel,\n                correlationId: this.correlationId\n              },\n              cryptoInterface: this.browserCrypto,\n              networkInterface: this.networkClient,\n              storageInterface: this.browserStorage,\n              serverTelemetryManager: serverTelemetryManager,\n              libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: \"\",\n                os: \"\"\n              }\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * @param hash\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (hash, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId); // Deserialize hash fragment response parameters.\n\n    var serverParams = UrlString.getDeserializedHash(hash);\n\n    if (!serverParams.state) {\n      throw BrowserAuthError.createHashDoesNotContainStateError();\n    }\n\n    var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n\n    if (!platformStateObj) {\n      throw BrowserAuthError.createUnableToParseStateError();\n    }\n\n    if (platformStateObj.interactionType !== interactionType) {\n      throw BrowserAuthError.createStateInteractionTypeMismatchError();\n    }\n\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityOptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"getDiscoveredAuthority called\");\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata\n            };\n            if (!requestAuthority) return [3\n            /*break*/\n            , 2];\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            this.logger.verbose(\"Creating discovered authority with configured authority\");\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper to validate app environment before making a request.\r\n   * @param request\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.preflightInteractiveRequest = function (request, interactionType) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"preflightInteractiveRequest called, validating app environment\", request === null || request === void 0 ? void 0 : request.correlationId); // block the reload if it occurred inside a hidden iframe\n\n            BrowserUtils.blockReloadInHiddenIframes(); // Check if interaction is in progress. Throw error if true.\n\n            if (this.browserStorage.isInteractionInProgress(false)) {\n              throw BrowserAuthError.createInteractionInProgressError();\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, interactionType)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n\n\n  StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.verbose(\"initializeAuthorizationRequest called\");\n            redirectUri = this.getRedirectUri(request.redirectUri);\n            browserState = {\n              interactionType: interactionType\n            };\n            state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || \"\", browserState);\n            _a = [{}];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              redirectUri: redirectUri,\n              state: state,\n              nonce: request.nonce || this.browserCrypto.createNewGuid(),\n              responseMode: ResponseMode.FRAGMENT\n            }]);\n            account = request.account || this.browserStorage.getActiveAccount();\n\n            if (account) {\n              this.logger.verbose(\"Setting validated request account\");\n              this.logger.verbosePii(\"Setting validated request account: \" + account);\n              validatedRequest.account = account;\n            } // Check for ADAL/MSAL v1 SSO\n\n\n            if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n              legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n\n              if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n              }\n            }\n\n            this.browserStorage.updateCacheEntries(validatedRequest.state, validatedRequest.nonce, validatedRequest.authority, validatedRequest.loginHint || \"\", validatedRequest.account || null);\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n\n  return StandardInteractionClient;\n}(BaseInteractionClient);\n\nexport { StandardInteractionClient };","map":{"version":3,"sources":["../../src/interaction_client/StandardInteractionClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, Logger, ServerTelemetryManager, CommonAuthorizationCodeRequest, Constants, AuthorizationCodeClient, ClientConfiguration, AuthorityOptions, Authority, AuthorityFactory, ServerAuthorizationCodeResponse, UrlString, CommonEndSessionRequest, ProtocolUtils, ResponseMode, StringUtils } from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserProtocolUtils, BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\n\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\n    protected navigationClient: INavigationClient;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, correlationId);\n        this.navigationClient = navigationClient;\n    }\n    \n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    protected async initializeAuthorizationCodeRequest(request: AuthorizationUrlRequest): Promise<CommonAuthorizationCodeRequest> {\n        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n        const generatedPkceParams = await this.browserCrypto.generatePkceCodes();\n\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: \"\",\n            codeVerifier: generatedPkceParams.verifier\n        };\n\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n\n        return authCodeRequest;\n    }\n\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    protected initializeLogoutRequest(logoutRequest?: EndSessionRequest): CommonEndSessionRequest {\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n\n        // Check if interaction is in progress. Throw error if true.\n        if (this.browserStorage.isInteractionInProgress()) {\n            throw BrowserAuthError.createInteractionInProgressError();\n        }\n\n        const validLogoutRequest: CommonEndSessionRequest = {\n            correlationId: this.browserCrypto.createNewGuid(),\n            ...logoutRequest\n        };\n\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n            } else {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n            }\n        } else {\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n        }\n\n        return validLogoutRequest;\n    }\n\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createAuthCodeClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string): Promise<AuthorizationCodeClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl);\n        return new AuthorizationCodeClient(clientConfig);\n    }\n\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getClientConfiguration(serverTelemetryManager: ServerTelemetryManager, requestAuthority?: string): Promise<ClientConfiguration> {\n        this.logger.verbose(\"getClientConfiguration called\");\n        const discoveredAuthority = await this.getDiscoveredAuthority(requestAuthority);\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n            },\n            loggerOptions: {\n                loggerCallback: this.config.system.loggerOptions.loggerCallback,\n                piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,\n                logLevel: this.config.system.loggerOptions.logLevel,\n                correlationId: this.correlationId\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: \"\",\n                os: \"\"\n            }\n        };\n    }\n\n    /**\n     * @param hash\n     * @param interactionType\n     */\n    protected validateAndExtractStateFromHash(hash: string, interactionType: InteractionType, requestCorrelationId?: string): string {\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        if (!serverParams.state) {\n            throw BrowserAuthError.createHashDoesNotContainStateError();\n        }\n\n        const platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n        if (!platformStateObj) {\n            throw BrowserAuthError.createUnableToParseStateError();\n        }\n\n        if (platformStateObj.interactionType !== interactionType) {\n            throw BrowserAuthError.createStateInteractionTypeMismatchError();\n        }\n\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n        return serverParams.state;\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getDiscoveredAuthority(requestAuthority?: string): Promise<Authority> {\n        this.logger.verbose(\"getDiscoveredAuthority called\");\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata\n        };\n\n        if (requestAuthority) {\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return await AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions);\n        }\n\n        this.logger.verbose(\"Creating discovered authority with configured authority\");\n        return await AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions);\n    }\n\n    /**\n     * Helper to validate app environment before making a request.\n     * @param request\n     * @param interactionType\n     */\n    protected async preflightInteractiveRequest(request: RedirectRequest|PopupRequest, interactionType: InteractionType): Promise<AuthorizationUrlRequest> {\n        this.logger.verbose(\"preflightInteractiveRequest called, validating app environment\", request?.correlationId);\n        // block the reload if it occurred inside a hidden iframe\n        BrowserUtils.blockReloadInHiddenIframes();\n    \n        // Check if interaction is in progress. Throw error if true.\n        if (this.browserStorage.isInteractionInProgress(false)) {\n            throw BrowserAuthError.createInteractionInProgressError();\n        }\n    \n        return await this.initializeAuthorizationRequest(request, interactionType);\n    }\n\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    protected async initializeAuthorizationRequest(request: RedirectRequest|PopupRequest|SsoSilentRequest, interactionType: InteractionType): Promise<AuthorizationUrlRequest> {\n        this.logger.verbose(\"initializeAuthorizationRequest called\");\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState: BrowserStateObject = {\n            interactionType: interactionType\n        };\n\n        const state = ProtocolUtils.setRequestState(\n            this.browserCrypto,\n            (request && request.state) || \"\",\n            browserState\n        );\n\n        const validatedRequest: AuthorizationUrlRequest = {\n            ...await this.initializeBaseRequest(request),\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || this.browserCrypto.createNewGuid(),\n            responseMode: ResponseMode.FRAGMENT\n        };\n\n        const account = request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\"Setting validated request account\");\n            this.logger.verbosePii(`Setting validated request account: ${account}`);\n            validatedRequest.account = account;\n        }\n\n        // Check for ADAL/MSAL v1 SSO\n        if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n\n        this.browserStorage.updateCacheEntries(validatedRequest.state, validatedRequest.nonce, validatedRequest.authority, validatedRequest.loginHint || \"\", validatedRequest.account || null);\n\n        return validatedRequest;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}