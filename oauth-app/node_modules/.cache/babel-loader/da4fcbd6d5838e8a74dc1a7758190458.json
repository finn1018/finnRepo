{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { EventType } from './EventType.js';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventMessageUtils =\n/** @class */\nfunction () {\n  function EventMessageUtils() {}\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n\n\n  EventMessageUtils.getInteractionStatusFromEvent = function (message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n\n        break;\n\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n\n        return InteractionStatus.None;\n\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n\n        return InteractionStatus.None;\n\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n\n        return InteractionStatus.None;\n\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n\n          return InteractionStatus.None;\n        }\n\n        break;\n    }\n\n    return null;\n  };\n\n  return EventMessageUtils;\n}();\n\nexport { EventMessageUtils };","map":{"version":3,"sources":["../../src/event/EventMessage.ts"],"names":[],"mappings":";;;;;AAAA;;;;;;;;AA4BA,WAAA,iBAAA,GAAA,CA0DC;;;;;;;;AAnDU,EAAA,iBAAA,CAAA,6BAAA,GAAP,UAAqC,OAArC,EAA4D,aAA5D,EAA6F;AACzF,YAAQ,OAAO,CAAC,SAAhB;AACI,WAAK,SAAS,CAAC,WAAf;AACI,eAAO,iBAAiB,CAAC,KAAzB;;AACJ,WAAK,SAAS,CAAC,gBAAf;AACI,eAAO,iBAAiB,CAAC,SAAzB;;AACJ,WAAK,SAAS,CAAC,mBAAf;AACI,YAAI,OAAO,CAAC,eAAR,KAA4B,eAAe,CAAC,QAA5C,IAAwD,OAAO,CAAC,eAAR,KAA4B,eAAe,CAAC,KAAxG,EAA+G;AAC3G,iBAAO,iBAAiB,CAAC,YAAzB;AACH;;AACD;;AACJ,WAAK,SAAS,CAAC,qBAAf;AACI,eAAO,iBAAiB,CAAC,cAAzB;;AACJ,WAAK,SAAS,CAAC,YAAf;AACI,eAAO,iBAAiB,CAAC,MAAzB;;AACJ,WAAK,SAAS,CAAC,kBAAf;AACA,WAAK,SAAS,CAAC,kBAAf;AACI,YAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,SAAzD,EAAoE;;AAEhE;AACH;;AACD,eAAO,iBAAiB,CAAC,IAAzB;;AACJ,WAAK,SAAS,CAAC,UAAf;AACI,YAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,MAAzD,EAAiE;;AAE7D;AACH;;AACD,eAAO,iBAAiB,CAAC,IAAzB;;AACJ,WAAK,SAAS,CAAC,mBAAf;AACI,YAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,cAAzD,EAAyE;;AAErE;AACH;;AACD,eAAO,iBAAiB,CAAC,IAAzB;;AACJ,WAAK,SAAS,CAAC,aAAf;AACA,WAAK,SAAS,CAAC,aAAf;AACA,WAAK,SAAS,CAAC,qBAAf;AACA,WAAK,SAAS,CAAC,qBAAf;AACI,YAAI,OAAO,CAAC,eAAR,KAA4B,eAAe,CAAC,QAA5C,IAAwD,OAAO,CAAC,eAAR,KAA4B,eAAe,CAAC,KAAxG,EAA+G;AAC3G,cAAI,aAAa,IAAI,aAAa,KAAK,iBAAiB,CAAC,KAArD,IAA8D,aAAa,KAAK,iBAAiB,CAAC,YAAtG,EAAoH;;AAEhH;AACH;;AACD,iBAAO,iBAAiB,CAAC,IAAzB;AACH;;AACD;AA5CR;;AAgDA,WAAO,IAAP;AACH,GAlDM;;AAmDX,SAAA,iBAAA;AAAC,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, AuthError, AccountInfo } from \"@azure/msal-common\";\nimport { EventType } from \"./EventType\";\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\nimport { PopupRequest, RedirectRequest, SilentRequest, SsoSilentRequest, EndSessionRequest } from \"..\";\n\nexport type EventMessage = {\n    eventType: EventType;\n    interactionType: InteractionType | null;\n    payload: EventPayload;\n    error: EventError;\n    timestamp: number;\n};\n\nexport type PopupEvent = {\n    popupWindow: Window;\n};\n\nexport type EventPayload = AccountInfo | PopupRequest | RedirectRequest | SilentRequest | SsoSilentRequest | EndSessionRequest | AuthenticationResult | PopupEvent | null;\n\nexport type EventError = AuthError | Error | null;\n\nexport type EventCallbackFunction = (message: EventMessage) => void;\n\nexport class EventMessageUtils {\n\n    /**\n     * Gets interaction status from event message\n     * @param message\n     * @param currentStatus\n     */\n    static getInteractionStatusFromEvent(message: EventMessage, currentStatus?: InteractionStatus): InteractionStatus|null {\n        switch (message.eventType) {\n            case EventType.LOGIN_START:\n                return InteractionStatus.Login;\n            case EventType.SSO_SILENT_START:\n                return InteractionStatus.SsoSilent;\n            case EventType.ACQUIRE_TOKEN_START:\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n                    return InteractionStatus.AcquireToken;\n                }\n                break;\n            case EventType.HANDLE_REDIRECT_START:\n                return InteractionStatus.HandleRedirect;\n            case EventType.LOGOUT_START:\n                return InteractionStatus.Logout;\n            case EventType.SSO_SILENT_SUCCESS:\n            case EventType.SSO_SILENT_FAILURE:\n                if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n                    // Prevent this event from clearing any status other than ssoSilent\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGOUT_END:\n                if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n                    // Prevent this event from clearing any status other than logout\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.HANDLE_REDIRECT_END:\n                if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n                    // Prevent this event from clearing any status other than handleRedirect\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGIN_SUCCESS:\n            case EventType.LOGIN_FAILURE:\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\n            case EventType.ACQUIRE_TOKEN_FAILURE:\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n                    if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n                        // Prevent this event from clearing any status other than login or acquireToken\n                        break;\n                    }\n                    return InteractionStatus.None;\n                }\n                break;\n            default:\n                break;\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}