{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { Authority, IdTokenEntity, AuthToken, AccountEntity, ScopeSet, AccessTokenEntity } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    if (request.account) {\n      this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n      this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n    } else if (request.authority) {\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata\n      };\n      var authority = new Authority(request.authority, this.config.system.networkClient, this.storage, authorityOptions); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId, options) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n    var idAuthToken = new AuthToken(idToken, this.cryptoObj);\n    var accountEntity = options.clientInfo ? AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setAccount(accountEntity);\n      this.storage.setIdTokenCredential(idTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = response.expires_in;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache };","map":{"version":3,"sources":["../../src/cache/TokenCache.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\nimport { ITokenCache } from \"./ITokenCache\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport type LoadTokenOptions = {\n    clientInfo?: string,\n    extendedExpiresOn?: number\n};\n\n/**\n * Token cache manager\n */\nexport class TokenCache implements ITokenCache {\n    // Flag to indicate if in browser environment\n    public isBrowserEnvironment: boolean;\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n    // Browser cache storage\n    private storage: BrowserCacheManager;\n    // Logger\n    private logger: Logger;\n    // Crypto class\n    private cryptoObj: ICrypto;\n\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n    \n    // Move getAllAccounts here and cache utility APIs\n\n    /**\n     * API to load tokens to msal-browser cache. \n     * @param request \n     * @param response\n     * @param options\n     */\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): void {\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n        if (!response.id_token) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n        }\n\n        if (request.account) {\n            this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n            this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n        } else if (request.authority) {\n\n            const authorityOptions: AuthorityOptions = {\n                protocolMode: this.config.auth.protocolMode,\n                knownAuthorities: this.config.auth.knownAuthorities,\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n                authorityMetadata: this.config.auth.authorityMetadata\n            };\n            const authority = new Authority(request.authority, this.config.system.networkClient, this.storage, authorityOptions);\n\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n            if (options.clientInfo) {\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\n                this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n            } else if (response.client_info) {\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\n                this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n            } else {\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n            }\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n        }\n    }\n\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken \n     * @param homeAccountId \n     * @param environment \n     * @param tenantId \n     * @param options \n     */\n    private loadIdToken(idToken: string, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n        const idAuthToken = new AuthToken(idToken, this.cryptoObj);\n        const accountEntity = options.clientInfo ?\n            AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) :\n            AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading id token\");\n            this.storage.setAccount(accountEntity);\n            this.storage.setIdTokenCredential(idTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request \n     * @param response \n     * @param options \n     * @param homeAccountId \n     * @param environment \n     * @param tenantId \n     * @returns \n     */\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\n            return;\n        }\n\n        if (!response.expires_in) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n        }\n\n        if (!options.extendedExpiresOn) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n        }\n        \n        const scopes = new ScopeSet(request.scopes).printScopes();\n        const expiresOn = response.expires_in;\n        const extendedExpiresOn = options.extendedExpiresOn;\n\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading access token\");\n            this.storage.setAccessTokenCredential(accessTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}