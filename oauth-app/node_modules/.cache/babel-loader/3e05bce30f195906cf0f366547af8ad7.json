{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AuthError, ThrottlingUtils, UrlString } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { PopupUtils } from '../utils/PopupUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { PopupHandler } from '../interaction_handler/PopupHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupClient =\n/** @class */\nfunction (_super) {\n  __extends(PopupClient, _super);\n\n  function PopupClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, popupName, popupWindowAttributes, popup, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.preflightInteractiveRequest(request, InteractionType.Popup)];\n\n          case 1:\n            validRequest = _a.sent();\n            popupName = PopupUtils.generatePopupName(this.config.auth.clientId, validRequest);\n            popupWindowAttributes = request.popupWindowAttributes || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n            if (this.config.system.asyncPopups) {\n              this.logger.verbose(\"asyncPopups set to true, acquiring token\"); // Passes on popup position and dimensions if in request\n\n              return [2\n              /*return*/\n              , this.acquireTokenPopupAsync(validRequest, popupName, popupWindowAttributes)];\n            } else {\n              // asyncPopups flag is set to false. Opens popup before acquiring token.\n              this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n              popup = PopupUtils.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes, this.logger);\n              return [2\n              /*return*/\n              , this.acquireTokenPopupAsync(validRequest, popupName, popupWindowAttributes, popup)];\n            }\n\n          case 2:\n            e_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(e_1)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n\n\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = PopupUtils.generateLogoutPopupName(this.config.auth.clientId, validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\"); // Passes on popup position and dimensions if in request\n\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = PopupUtils.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes, this.logger);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PopupClient.prototype.acquireTokenPopupAsync = function (validRequest, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authCodeRequest, authClient, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, state, result, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 2:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(validRequest)];\n\n          case 4:\n            navigateUrl = _a.sent();\n            interactionHandler = new PopupHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , interactionHandler.monitorPopupForHash(popupWindow)];\n\n          case 5:\n            hash = _a.sent();\n            state = this.validateAndExtractStateFromHash(hash, InteractionType.Popup, validRequest.correlationId); // Remove throttle if it exists\n\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n\n          case 6:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 7:\n            e_2 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_2;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n\n\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupUtils, popupWindow, e_3, navigationOptions, absoluteUrl, e_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 8,, 9]); // Clear cache on logout\n\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            this.browserStorage.setInteractionInProgress(true);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupUtils = new PopupUtils(this.browserStorage, this.logger);\n            popupWindow = popupUtils.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 6,, 7]); // Don't care if this throws an error (User Cancelled)\n\n\n            return [4\n            /*yield*/\n            , popupUtils.monitorPopupForSameOrigin(popupWindow)];\n\n          case 5:\n            // Don't care if this throws an error (User Cancelled)\n            _a.sent();\n\n            this.logger.verbose(\"Popup successfully redirected to postLogoutRedirectUri\");\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_3 = _a.sent();\n            this.logger.verbose(\"Error occurred while monitoring popup for same origin. Session on server may remain active. Error: \" + e_3);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            popupUtils.cleanPopup(popupWindow);\n\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecing main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            e_4 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_4 instanceof AuthError) {\n              e_4.setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_4);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_4);\n            throw e_4;\n\n          case 9:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PopupClient;\n}(StandardInteractionClient);\n\nexport { PopupClient };","map":{"version":3,"sources":["../../src/interaction_client/PopupClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError } from \"@azure/msal-common\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { PopupWindowAttributes, PopupUtils } from \"../utils/PopupUtils\";\nimport { EventType } from \"../event/EventType\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { PopupHandler, PopupParams } from \"../interaction_handler/PopupHandler\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { PopupRequest } from \"../request/PopupRequest\";\n\nexport class PopupClient extends StandardInteractionClient {\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request \n     */\n    async acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            const validRequest = await this.preflightInteractiveRequest(request, InteractionType.Popup);\n            const popupName = PopupUtils.generatePopupName(this.config.auth.clientId, validRequest);\n            const popupWindowAttributes = request.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(validRequest, popupName, popupWindowAttributes);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n                const popup = PopupUtils.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes, this.logger);\n                return this.acquireTokenPopupAsync(validRequest, popupName, popupWindowAttributes, popup);\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest \n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n\n            const popupName = PopupUtils.generateLogoutPopupName(this.config.auth.clientId, validLogoutRequest);\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                const popup = PopupUtils.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes, this.logger);\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param validRequest\n     * @param popupName\n     * @param popup\n     * @param popupWindowAttributes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    private async acquireTokenPopupAsync(validRequest: AuthorizationUrlRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl(validRequest);\n\n            // Create popup interaction handler.\n            const interactionHandler = new PopupHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupParameters: PopupParams = {\n                popup,\n                popupName,\n                popupWindowAttributes\n            };\n            const popupWindow: Window = interactionHandler.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const hash = await interactionHandler.monitorPopupForHash(popupWindow);\n            const state = this.validateAndExtractStateFromHash(hash, InteractionType.Popup, validRequest.correlationId);\n\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n\n            return result;\n        } catch (e) {            \n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * \n     * @param validRequest \n     * @param popupName \n     * @param requestAuthority\n     * @param popup \n     * @param mainWindowRedirectUri \n     * @param popupWindowAttributes \n     */\n    private async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n        \n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            this.browserStorage.setInteractionInProgress(true);\n            // Initialize the client\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n\n            const popupUtils = new PopupUtils(this.browserStorage, this.logger);\n            // Open the popup window to requestUrl.\n            const popupWindow = popupUtils.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            try {\n                // Don't care if this throws an error (User Cancelled)\n                await popupUtils.monitorPopupForSameOrigin(popupWindow);\n                this.logger.verbose(\"Popup successfully redirected to postLogoutRedirectUri\");\n            } catch (e) {\n                this.logger.verbose(`Error occurred while monitoring popup for same origin. Session on server may remain active. Error: ${e}`);\n            }\n\n            popupUtils.cleanPopup(popupWindow);\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\n                this.logger.verbosePii(`Redirecing main window to: ${absoluteUrl}`);\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            \n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}