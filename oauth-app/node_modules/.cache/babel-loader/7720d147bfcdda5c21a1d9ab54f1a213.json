{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, StringUtils, PromptValue } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentIframeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentIframeClient, _super);\n\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;\n\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\r\n   * @param request\r\n   */\n\n\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, authClient, navigateUrl, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenByIframe called\"); // Check that we have some SSO data\n\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            } // Check that prompt is set to none, throw error if it is set to anything else.\n\n\n            if (request.prompt && request.prompt !== PromptValue.NONE) {\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: PromptValue.NONE\n            }), InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(silentRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(silentRequest)];\n\n          case 5:\n            navigateUrl = _a.sent();\n            return [4\n            /*yield*/\n            , this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger)];\n\n          case 6:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentIframeClient.prototype.silentTokenHelper = function (navigateUrl, authCodeRequest, authClient, browserRequestLogger) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentHandler, msalFrame, hash, state;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);\n            return [4\n            /*yield*/\n            , silentHandler.initiateAuthRequest(navigateUrl)];\n\n          case 1:\n            msalFrame = _a.sent();\n            return [4\n            /*yield*/\n            , silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n\n          case 2:\n            hash = _a.sent();\n            state = this.validateAndExtractStateFromHash(hash, InteractionType.Silent, authCodeRequest.correlationId); // Handle response from hash string\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n\n  return SilentIframeClient;\n}(StandardInteractionClient);\n\nexport { SilentIframeClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentIframeClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId);\n        this.apiId = apiId;\n    }\n    \n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\n     * @param request \n     */\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenByIframe called\");\n        // Check that we have some SSO data\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n\n        // Check that prompt is set to none, throw error if it is set to anything else.\n        if (request.prompt && request.prompt !== PromptValue.NONE) {\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\n            ...request,\n            prompt: PromptValue.NONE\n        }, InteractionType.Silent);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create authorize request url\n            const navigateUrl = await authClient.getAuthCodeUrl(silentRequest);\n\n            return await this.silentTokenHelper(navigateUrl, authCodeRequest, authClient, this.logger);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    private async silentTokenHelper(navigateUrl: string, authCodeRequest: CommonAuthorizationCodeRequest, authClient: AuthorizationCodeClient, browserRequestLogger: Logger): Promise<AuthenticationResult> {\n        // Create silent handler\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, browserRequestLogger, this.config.system.navigateFrameWait);\n        // Get the frame handle for the silent request\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\n        const state = this.validateAndExtractStateFromHash(hash, InteractionType.Silent, authCodeRequest.correlationId);\n\n        // Handle response from hash string\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}