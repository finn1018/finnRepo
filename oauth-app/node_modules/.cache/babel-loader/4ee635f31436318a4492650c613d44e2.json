{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AuthError, UrlString } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { ApiId, InteractionType, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectClient =\n/** @class */\nfunction (_super) {\n  __extends(RedirectClient, _super);\n\n  function RedirectClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n\n\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.preflightInteractiveRequest(request, InteractionType.Redirect)];\n\n          case 1:\n            validRequest = _a.sent();\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(validRequest)];\n\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage);\n            return [4\n            /*yield*/\n            , interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            state = void 0;\n\n            try {\n              state = this.validateAndExtractStateFromHash(responseHash, InteractionType.Redirect);\n              BrowserUtils.clearHash(window);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || \"\";\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3\n            /*break*/\n            , 3]; // We are on the page we need to navigate to - handle hash\n\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4\n            /*yield*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 2:\n            handleHashResult = _a.sent();\n\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n\n            return [2\n            /*return*/\n            , handleHashResult];\n\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2\n            /*return*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3\n            /*break*/\n            , 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3\n            /*break*/\n            , 6];\n            homepage = BrowserUtils.getHomepage(); // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(homepage, navigationOptions)];\n\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2\n              /*return*/\n              , this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n\n            _a.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , null];\n\n          case 10:\n            e_2 = _a.sent();\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\"); // Get current location hash from window or cache.\n\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n\n    if (isResponseHash) {\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n\n\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, currentAuthority, authClient, interactionHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n\n\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest); // Clear cache on logout\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validLogoutRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 8:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            e_3 = _a.sent();\n\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n\n\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n\n  return RedirectClient;\n}(StandardInteractionClient);\n\nexport { RedirectClient };","map":{"version":3,"sources":["../../src/interaction_client/RedirectClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\n\nexport class RedirectClient extends StandardInteractionClient {   \n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request \n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest: AuthorizationUrlRequest = await this.preflightInteractiveRequest(request, InteractionType.Redirect);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl(validRequest);\n\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash\n     */\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n                return null;\n            }\n\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n            if (!responseHash) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            let state: string;\n            try {\n                state = this.validateAndExtractStateFromHash(responseHash, InteractionType.Redirect);\n                BrowserUtils.clearHash(window);\n                this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || \"\";\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n                return this.handleHash(responseHash, state, serverTelemetryManager);\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now. \n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */  \n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    private getRedirectResponseHash(hash: string): string | null {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n\n        if (isResponseHash) {\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\n            return hash;\n        }\n\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n        return cachedHash;\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    private async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw BrowserAuthError.createNoCachedAuthorityError();\n        }\n\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\n        this.logger.verbose(\"Auth code client created\");\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient, this.config.auth.clientId);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n\n        try {\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n                        \n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n            \n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n            };\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\n            \n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n                }\n            } else {\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                return;\n            }\n        } catch(e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}