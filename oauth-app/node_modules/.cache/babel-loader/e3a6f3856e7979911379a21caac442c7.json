{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { DEFAULT_REQUEST, InteractionType } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { SilentCacheClient } from '../interaction_client/SilentCacheClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"loginRedirect called\");\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(request || DEFAULT_REQUEST)];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    this.logger.verbose(\"loginPopup called\");\n    return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || \"\",\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\n          response = this.acquireTokenSilentAsync(request, account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentCacheClient, silentRequest;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            return [2\n            /*return*/\n            , silentCacheClient.acquireToken(silentRequest).catch(function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var tokenRenewalResult, tokenRenewalError_1;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this.acquireTokenByRefreshToken(silentRequest)];\n\n                    case 1:\n                      tokenRenewalResult = _a.sent();\n                      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n                      return [2\n                      /*return*/\n                      , tokenRenewalResult];\n\n                    case 2:\n                      tokenRenewalError_1 = _a.sent();\n                      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\n                      throw tokenRenewalError_1;\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"sources":["../../src/app/PublicClientApplication.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AuthenticationResult, RequestThumbprint } from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { DEFAULT_REQUEST, InteractionType } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { SilentCacheClient } from \"../interaction_client/SilentCacheClient\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n\n    // Active requests\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration object for the MSAL PublicClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n\n        this.activeSilentTokenRequests = new Map();\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        this.logger.verbose(\"loginRedirect called\");\n        return this.acquireTokenRedirect(request || DEFAULT_REQUEST);\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"loginPopup called\");\n        return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw BrowserAuthError.createNoAccountError();\n        }\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || \"\",\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\n            const response = this.acquireTokenSilentAsync(request, account)\n                .then((result) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    return result;\n                })\n                .catch((error) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    throw error;\n                });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return response;\n        } else {\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\n            return cachedResponse;\n        }\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     * @param {@link (SilentRequest:type)}\n     * @param {@link (AccountInfo:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} \n     */\n    private async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\n        const silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, request.correlationId);\n        const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n\n        return silentCacheClient.acquireToken(silentRequest).catch(async () => {\n            try {\n                const tokenRenewalResult = await this.acquireTokenByRefreshToken(silentRequest);\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n                return tokenRenewalResult;\n            } catch (tokenRenewalError) {\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n                throw tokenRenewalError;\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}