{"ast":null,"code":"/*! @azure/msal-browser v2.21.0 2022-01-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentAuthCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentAuthCodeClient, _super);\n\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId) || this;\n\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n\n\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\"); // Auth code payload is required\n\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            });\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait); // Handle auth code parameters from request\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n\n          case 4:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\n\nexport { SilentAuthCodeClient };","map":{"version":3,"sources":["../../src/interaction_client/SilentAuthCodeClient.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAkB0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAGtC,WAAA,oBAAA,CAAY,MAAZ,EAA0C,WAA1C,EAA4E,aAA5E,EAAoG,MAApG,EAAoH,YAApH,EAAgJ,gBAAhJ,EAAqL,KAArL,EAAmM,aAAnM,EAAyN;AAAzN,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAN,EAAc,WAAd,EAA2B,aAA3B,EAA0C,MAA1C,EAAkD,YAAlD,EAAgE,gBAAhE,EAAkF,aAAlF,KAAgG,IADpG;;AAEI,IAAA,KAAI,CAAC,KAAL,GAAa,KAAb;;AACH;;;;;;;AAMK,EAAA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAN,UAAmB,OAAnB,EAAoD;;;;;;AAChD,iBAAK,MAAL,CAAY,KAAZ,CAAkB,0CAAlB,E;;AAGA,gBAAI,CAAC,OAAO,CAAC,IAAb,EAAmB;AACf,oBAAM,gBAAgB,CAAC,2BAAjB,EAAN;AACH;;AAG8C,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,8BAAL,CAAoC,OAApC,EAA6C,eAAe,CAAC,MAA7D,CAAN,CAAA;;;AAAzC,YAAA,aAAa,GAA4B,EAAA,CAAA,IAAA,EAAzC;AAEA,YAAA,sBAAsB,GAAG,KAAK,gCAAL,CAAsC,KAAK,KAA3C,CAAzB;;;;;;AAKI,YAAA,eAAe,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACd,aADc,CAAA,EACD;AAChB,cAAA,IAAI,EAAE,OAAO,CAAC;AADE,aADC,CAAf;AAMe,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,sBAAL,CAA4B,sBAA5B,EAAoD,aAAa,CAAC,SAAlE,CAAN,CAAA;;;AAAf,YAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;AACA,YAAA,UAAU,GAAqC,IAAI,gCAAJ,CAAqC,YAArC,CAA/C;AACN,iBAAK,MAAL,CAAY,OAAZ,CAAoB,0BAApB;AAGM,YAAA,aAAa,GAAG,IAAI,aAAJ,CAAkB,UAAlB,EAA8B,KAAK,cAAnC,EAAmD,eAAnD,EAAoE,KAAK,MAAzE,EAAiF,KAAK,MAAL,CAAY,MAAZ,CAAmB,iBAApG,CAAhB,C;;AAGN,mBAAA,CAAA;AAAA;AAAA,cAAO,aAAa,CAAC,4BAAd,CACH;AACI,cAAA,IAAI,EAAE,OAAO,CAAC,IADlB;AAEI,cAAA,YAAY,EAAE,OAAO,CAAC,WAF1B;AAGI,cAAA,qBAAqB,EAAE,OAAO,CAAC,kBAHnC;AAII,cAAA,wBAAwB,EAAE,OAAO,CAAC;AAJtC,aADG,EAOH,aAAa,CAAC,KAPX,EAQH,UAAU,CAAC,SARR,EASH,KAAK,aATF,EAUH,KAVG,CAAP,CAAA;;;;;AAaA,gBAAI,GAAC,YAAY,SAAjB,EAA4B;AACxB,cAAA,GAAC,CAAC,gBAAF,CAAmB,KAAK,aAAxB;AACH;;AACD,YAAA,sBAAsB,CAAC,kBAAvB,CAA0C,GAA1C;AACA,iBAAK,cAAL,CAAoB,mBAApB,CAAwC,aAAa,CAAC,KAAtD;AACA,kBAAM,GAAN;;;;;;;;;AAEP,GAlDK;;;;;;AAuDN,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;;AAEI,WAAO,OAAO,CAAC,MAAR,CAAe,gBAAgB,CAAC,kCAAjB,EAAf,CAAP;AACH,GAHD;;AAIJ,SAAA,oBAAA;AAvEA,C,CAA0C,yB","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, correlationId);\n        this.apiId = apiId;\n    }\n    \n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request \n     */\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n\n        // Auth code payload is required\n        if (!request.code) {\n            throw BrowserAuthError.createAuthCodeRequiredError();\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n\n            // Initialize the client\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);\n\n            // Handle auth code parameters from request\n            return silentHandler.handleCodeResponseFromServer(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName\n                },\n                silentRequest.state, \n                authClient.authority, \n                this.networkClient,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}